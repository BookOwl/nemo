use ast::{Expr, Op, Statement, Prototype, Definition};

grammar;

// Top level definitions

Prototype: Prototype = {
    <Name> "(" <Names> ")" => Prototype::new(<>),
};

pub Definition: Definition = {
    <Prototype> "=>" <Expr> => Definition::new(<>)
};

pub Program: Vec<Definition> = {
    Definition*,
};

// Expressions
pub Expr: Box<Expr> = {
    Lambda,
    Control,
};

Control: Box<Expr> = {
    If,
    While,
    BoolExpr,
};

BoolExpr: Box<Expr> = {
    BoolExpr BoolOp CompExpr => Box::new(Expr::Binary(<>)),
    CompExpr,
};

CompExpr: Box<Expr> = {
    CompExpr CompOp AddExpr => Box::new(Expr::Binary(<>)),
    AddExpr,
};

AddExpr: Box<Expr> = {
    AddExpr ExprOp Factor => Box::new(Expr::Binary(<>)),
    Factor,
};

Factor: Box<Expr> = {
    Factor FactorOp Pipe => Box::new(Expr::Binary(<>)),
    Pipe,
};

Pipe: Box<Expr> = {
    Pipe PipeOp Term => Box::new(Expr::Binary(<>)),
    Term,
};

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    Name => Box::new(Expr::Name(<>)),
    Call,
    "pull" => Box::new(Expr::Pull),
    "(" <Expr> ")",
    "{" <Statements> "}" => Box::new(Expr::Block(<>))
};

Num: i32 = <s:r"[0-9]+"> => s.parse::<i32>().unwrap();
Name: String = <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => String::from(s);

Call: Box<Expr> = {
    "(" <Expr> ")" "(" <Exprs> ")" => Box::new(Expr::Call(<>)),
    <n:Name> "(" <e:Exprs> ")" => Box::new(Expr::Call(Box::new(Expr::Name(n)), e)),
};

Lambda: Box<Expr> = {
    <n:Name> "->" <e:Expr> => Box::new(Expr::Lambda(vec![String::from(n)], e)),
    "|" <Names> "|" "->" <Expr> => Box::new(Expr::Lambda(<>)),
};

// Control flow expressions.

If: Box<Expr> = {
    "if" <Expr> "then" <Expr> "else" <Expr> => Box::new(Expr::If(<>))
};

While: Box<Expr> = {
    "while" <Expr> "do" <Expr> => Box::new(Expr::While(<>))
};

// Statements
pub Statement: Box<Statement> = {
    <Name> ":=" <Expr> => Box::new(Statement::Assignment(<>)),
    "push" <Expr> => Box::new(Statement::Push(<>)),
    <Expr> => Box::new(Statement::Expr(<>))
};

// Helpers

ExprOp: Op = {
    "+" => Op::Plus,
    "-" => Op::Minus,
};

FactorOp: Op = {
    "*" => Op::Times,
    "/" => Op::Slash,
    "%" => Op::Percent,
};

PipeOp: Op = {
    "|" => Op::Pipe,
};

CompOp: Op = {
    ">" => Op::Greater,
    "<" => Op::Lesser,
    "=" => Op::Equals,
};

BoolOp: Op = {
    "and" => Op::And,
    "or"  => Op::Or,
};

Exprs = Comma<Expr>;
Names = Comma<Name>;
Statements = SemiCol<Statement>;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

SemiCol<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};
